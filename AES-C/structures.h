/* "structures.h" defines the look-up tables and KeyExpansion function 
 * used in encrypt.cpp and decrypt.cpp
 */
#ifndef STRUCTURES_H
#define STRUCTURES_H
// Encryption: Forward Rijndael S-box 
unsigned char s[256] =
{
	0x63, 0x7c, 0x65, 0x98, 0xe9, 0xc4, 0x9e, 0x0c, 0xaf, 0x46, 0x39, 0x3b, 0x14, 0x66, 0xd4, 0x0f,
	0x05, 0x47, 0xf1, 0x51, 0x4e, 0xac, 0x4f, 0x9f, 0xd8, 0x04, 0x68, 0x8e, 0x31, 0x5a, 0x55, 0x96,
	0x50, 0xcf, 0x71, 0xbf, 0xa3, 0x85, 0xf3, 0x74, 0xf5, 0x6f, 0x84, 0xb0, 0x75, 0xc7, 0x94, 0xc5,
	0xbe, 0xa0, 0xd0, 0x80, 0xe6, 0x83, 0x1c, 0x08, 0x4a, 0x37, 0x76, 0x38, 0x78, 0x70, 0x10, 0xd9,
	0x73, 0xfb, 0xbc, 0xe3, 0x6a, 0x1b, 0x0d, 0x9c, 0x8a, 0xff, 0x99, 0x5e, 0xa2, 0x5b, 0x61, 0xa9,
	0x28, 0x89, 0xec, 0xdd, 0x19, 0xcc, 0x03, 0x2c, 0xe1, 0xb4, 0xb8, 0x90, 0x11, 0xf4, 0xb9, 0xcd,
	0x8d, 0x1a, 0x0b, 0xf8, 0xba, 0x26, 0x92, 0x58, 0xa1, 0x6e, 0x13, 0x21, 0xdc, 0xc3, 0x5f, 0x30,
	0x7e, 0x01, 0xc0, 0x1d, 0x60, 0x72, 0xce, 0x0e, 0xee, 0xb3, 0xea, 0x67, 0x53, 0x23, 0x3e, 0x81,
	0x6b, 0xc2, 0xa6, 0xf0, 0x8c, 0xa7, 0xaa, 0x52, 0xe7, 0x79, 0xd6, 0x22, 0x54, 0x91, 0x15, 0xfa,
	0x97, 0xdf, 0x2d, 0x4c, 0x1e, 0xb6, 0xfd, 0x2f, 0x0a, 0x49, 0xf6, 0x00, 0x62, 0x41, 0x8f, 0x93,
	0xc6, 0xcb, 0x16, 0x45, 0xa4, 0xe4, 0xb5, 0xb1, 0xd7, 0x7b, 0x3d, 0x2a, 0xda, 0x3a, 0x4d, 0xae,
	0xab, 0xad, 0x88, 0x02, 0x07, 0x2b, 0x9a, 0xfc, 0xd3, 0x29, 0xa8, 0x69, 0x87, 0x5d, 0xbd, 0x3f,
	0x9d, 0x18, 0x56, 0xe5, 0xde, 0xed, 0x27, 0xb7, 0x06, 0x36, 0x48, 0xc1, 0x9b, 0x59, 0x77, 0x4b,
	0x8b, 0x25, 0x6c, 0xbb, 0xd2, 0xef, 0x42, 0x7a, 0x35, 0xc9, 0x33, 0x17, 0x7d, 0x86, 0xca, 0x6d,
	0x64, 0xf7, 0xdb, 0x1f, 0xb2, 0xfe, 0x5c, 0xe0, 0xe2, 0x40, 0xeb, 0xd1, 0x3c, 0x32, 0xd5, 0x7f,
	0xa5, 0x24, 0x82, 0x34, 0x2e, 0x09, 0xe8, 0xc8, 0xf2, 0x57, 0x43, 0x95, 0x44, 0x20, 0x12, 0xf9
};


// Encryption: Multiply by 2 for MixColumns
unsigned char mul2[] =
{
	0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0E, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1A, 0x1C, 0x1E, 
	0x20, 0x22, 0x24, 0x26, 0x28, 0x2A, 0x2C, 0x2E, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3A, 0x3C, 0x3E, 
	0x40, 0x42, 0x44, 0x46, 0x48, 0x4A, 0x4C, 0x4E, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5A, 0x5C, 0x5E, 
	0x60, 0x62, 0x64, 0x66, 0x68, 0x6A, 0x6C, 0x6E, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7A, 0x7C, 0x7E, 
	0x80, 0x82, 0x84, 0x86, 0x88, 0x8A, 0x8C, 0x8E, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9A, 0x9C, 0x9E, 
	0xA0, 0xA2, 0xA4, 0xA6, 0xA8, 0xAA, 0xAC, 0xAE, 0xB0, 0xB2, 0xB4, 0xB6, 0xB8, 0xBA, 0xBC, 0xBE, 
	0xC0, 0xC2, 0xC4, 0xC6, 0xC8, 0xCA, 0xCC, 0xCE, 0xD0, 0xD2, 0xD4, 0xD6, 0xD8, 0xDA, 0xDC, 0xDE, 
	0xE0, 0xE2, 0xE4, 0xE6, 0xE8, 0xEA, 0xEC, 0xEE, 0xF0, 0xF2, 0xF4, 0xF6, 0xF8, 0xFA, 0xFC, 0xFE, 
	0x7B, 0x79, 0x7F, 0x7D, 0x73, 0x71, 0x77, 0x75, 0x6B, 0x69, 0x6F, 0x6D, 0x63, 0x61, 0x67, 0x65, 
	0x5B, 0x59, 0x5F, 0x5D, 0x53, 0x51, 0x57, 0x55, 0x4B, 0x49, 0x4F, 0x4D, 0x43, 0x41, 0x47, 0x45, 
	0x3B, 0x39, 0x3F, 0x3D, 0x33, 0x31, 0x37, 0x35, 0x2B, 0x29, 0x2F, 0x2D, 0x23, 0x21, 0x27, 0x25, 
	0x1B, 0x19, 0x1F, 0x1D, 0x13, 0x11, 0x17, 0x15, 0x0B, 0x09, 0x0F, 0x0D, 0x03, 0x01, 0x07, 0x05, 
	0xFB, 0xF9, 0xFF, 0xFD, 0xF3, 0xF1, 0xF7, 0xF5, 0xEB, 0xE9, 0xEF, 0xED, 0xE3, 0xE1, 0xE7, 0xE5, 
	0xDB, 0xD9, 0xDF, 0xDD, 0xD3, 0xD1, 0xD7, 0xD5, 0xCB, 0xC9, 0xCF, 0xCD, 0xC3, 0xC1, 0xC7, 0xC5, 
	0xBB, 0xB9, 0xBF, 0xBD, 0xB3, 0xB1, 0xB7, 0xB5, 0xAB, 0xA9, 0xAF, 0xAD, 0xA3, 0xA1, 0xA7, 0xA5, 
	0x9B, 0x99, 0x9F, 0x9D, 0x93, 0x91, 0x97, 0x95, 0x8B, 0x89, 0x8F, 0x8D, 0x83, 0x81, 0x87, 0x85
};

// Encryption: Multiply by 3 for MixColumns
unsigned char mul3[] =
{
	0x00, 0x03, 0x06, 0x05, 0x0C, 0x0F, 0x0A, 0x09, 0x18, 0x1B, 0x1E, 0x1D, 0x14, 0x17, 0x12, 0x11, 
	0x30, 0x33, 0x36, 0x35, 0x3C, 0x3F, 0x3A, 0x39, 0x28, 0x2B, 0x2E, 0x2D, 0x24, 0x27, 0x22, 0x21, 
	0x60, 0x63, 0x66, 0x65, 0x6C, 0x6F, 0x6A, 0x69, 0x78, 0x7B, 0x7E, 0x7D, 0x74, 0x77, 0x72, 0x71, 
	0x50, 0x53, 0x56, 0x55, 0x5C, 0x5F, 0x5A, 0x59, 0x48, 0x4B, 0x4E, 0x4D, 0x44, 0x47, 0x42, 0x41, 
	0xC0, 0xC3, 0xC6, 0xC5, 0xCC, 0xCF, 0xCA, 0xC9, 0xD8, 0xDB, 0xDE, 0xDD, 0xD4, 0xD7, 0xD2, 0xD1, 
	0xF0, 0xF3, 0xF6, 0xF5, 0xFC, 0xFF, 0xFA, 0xF9, 0xE8, 0xEB, 0xEE, 0xED, 0xE4, 0xE7, 0xE2, 0xE1, 
	0xA0, 0xA3, 0xA6, 0xA5, 0xAC, 0xAF, 0xAA, 0xA9, 0xB8, 0xBB, 0xBE, 0xBD, 0xB4, 0xB7, 0xB2, 0xB1, 
	0x90, 0x93, 0x96, 0x95, 0x9C, 0x9F, 0x9A, 0x99, 0x88, 0x8B, 0x8E, 0x8D, 0x84, 0x87, 0x82, 0x81, 
	0xFB, 0xF8, 0xFD, 0xFE, 0xF7, 0xF4, 0xF1, 0xF2, 0xE3, 0xE0, 0xE5, 0xE6, 0xEF, 0xEC, 0xE9, 0xEA, 
	0xCB, 0xC8, 0xCD, 0xCE, 0xC7, 0xC4, 0xC1, 0xC2, 0xD3, 0xD0, 0xD5, 0xD6, 0xDF, 0xDC, 0xD9, 0xDA, 
	0x9B, 0x98, 0x9D, 0x9E, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8F, 0x8C, 0x89, 0x8A, 
	0xAB, 0xA8, 0xAD, 0xAE, 0xA7, 0xA4, 0xA1, 0xA2, 0xB3, 0xB0, 0xB5, 0xB6, 0xBF, 0xBC, 0xB9, 0xBA, 
	0x3B, 0x38, 0x3D, 0x3E, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2F, 0x2C, 0x29, 0x2A, 
	0x0B, 0x08, 0x0D, 0x0E, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1F, 0x1C, 0x19, 0x1A, 
	0x5B, 0x58, 0x5D, 0x5E, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4F, 0x4C, 0x49, 0x4A, 
	0x6B, 0x68, 0x6D, 0x6E, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7F, 0x7C, 0x79, 0x7A
};

// Used in KeyExpansion
unsigned char rcon[256] = {
	0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x7B, 0xF6, 0x97, 0x55, 0xAA, 0x2F, 0x5E, 
	0xBC, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0xFB, 0x8D, 0x61, 0xC2, 0xFF, 0x85, 0x71, 0xE2, 
	0xBF, 0x05, 0x0A, 0x14, 0x28, 0x50, 0xA0, 0x3B, 0x76, 0xEC, 0xA3, 0x3D, 0x7A, 0xF4, 0x93, 0x5D, 
	0xBA, 0x0F, 0x1E, 0x3C, 0x78, 0xF0, 0x9B, 0x4D, 0x9A, 0x4F, 0x9E, 0x47, 0x8E, 0x67, 0xCE, 0xE7, 
	0xB5, 0x11, 0x22, 0x44, 0x88, 0x6B, 0xD6, 0xD7, 0xD5, 0xD1, 0xD9, 0xC9, 0xE9, 0xA9, 0x29, 0x52, 
	0xA4, 0x33, 0x66, 0xCC, 0xE3, 0xBD, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x7B, 0xF6, 
	0x97, 0x55, 0xAA, 0x2F, 0x5E, 0xBC, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0xFB, 0x8D, 0x61, 
	0xC2, 0xFF, 0x85, 0x71, 0xE2, 0xBF, 0x05, 0x0A, 0x14, 0x28, 0x50, 0xA0, 0x3B, 0x76, 0xEC, 0xA3, 
	0x3D, 0x7A, 0xF4, 0x93, 0x5D, 0xBA, 0x0F, 0x1E, 0x3C, 0x78, 0xF0, 0x9B, 0x4D, 0x9A, 0x4F, 0x9E, 
	0x47, 0x8E, 0x67, 0xCE, 0xE7, 0xB5, 0x11, 0x22, 0x44, 0x88, 0x6B, 0xD6, 0xD7, 0xD5, 0xD1, 0xD9, 
	0xC9, 0xE9, 0xA9, 0x29, 0x52, 0xA4, 0x33, 0x66, 0xCC, 0xE3, 0xBD, 0x01, 0x02, 0x04, 0x08, 0x10, 
	0x20, 0x40, 0x80, 0x7B, 0xF6, 0x97, 0x55, 0xAA, 0x2F, 0x5E, 0xBC, 0x03, 0x06, 0x0C, 0x18, 0x30, 
	0x60, 0xC0, 0xFB, 0x8D, 0x61, 0xC2, 0xFF, 0x85, 0x71, 0xE2, 0xBF, 0x05, 0x0A, 0x14, 0x28, 0x50, 
	0xA0, 0x3B, 0x76, 0xEC, 0xA3, 0x3D, 0x7A, 0xF4, 0x93, 0x5D, 0xBA, 0x0F, 0x1E, 0x3C, 0x78, 0xF0, 
	0x9B, 0x4D, 0x9A, 0x4F, 0x9E, 0x47, 0x8E, 0x67, 0xCE, 0xE7, 0xB5, 0x11, 0x22, 0x44, 0x88, 0x6B, 
	0xD6, 0xD7, 0xD5, 0xD1, 0xD9, 0xC9, 0xE9, 0xA9, 0x29, 0x52, 0xA4, 0x33, 0x66, 0xCC, 0xE3, 0xBD
};


// Decryption: Inverse Rijndael S-box
unsigned char inv_s[256] =
{
	0x9b, 0x71, 0xb3, 0x56, 0x19, 0x10, 0xc8, 0xb4, 0x37, 0xf5, 0x98, 0x62, 0x07, 0x46, 0x77, 0x0f,
	0x3e, 0x5c, 0xfe, 0x6a, 0x0c, 0x8e, 0xa2, 0xdb, 0xc1, 0x54, 0x61, 0x45, 0x36, 0x73, 0x94, 0xe3,
	0xfd, 0x6b, 0x8b, 0x7d, 0xf1, 0xd1, 0x65, 0xc6, 0x50, 0xb9, 0xab, 0xb5, 0x57, 0x92, 0xf4, 0x97,
	0x6f, 0x1c, 0xed, 0xda, 0xf3, 0xd8, 0xc9, 0x39, 0x3b, 0x0a, 0xad, 0x0b, 0xec, 0xaa, 0x7e, 0xbf,
	0xe9, 0x9d, 0xd6, 0xfa, 0xfc, 0xa3, 0x09, 0x11, 0xca, 0x99, 0x38, 0xcf, 0x93, 0xae, 0x14, 0x16,
	0x20, 0x13, 0x87, 0x7c, 0x8c, 0x1e, 0xc2, 0xf9, 0x67, 0xcd, 0x1d, 0x4d, 0xe6, 0xbd, 0x4b, 0x6e,
	0x74, 0x4e, 0x9c, 0x00, 0xe0, 0x02, 0x0d, 0x7b, 0x1a, 0xbb, 0x44, 0x80, 0xd2, 0xdf, 0x69, 0x29,
	0x3d, 0x22, 0x75, 0x40, 0x27, 0x2c, 0x3a, 0xce, 0x3c, 0x89, 0xd7, 0xa9, 0x01, 0xdc, 0x70, 0xef,
	0x33, 0x7f, 0xf2, 0x35, 0x2a, 0x25, 0xdd, 0xbc, 0xb2, 0x51, 0x48, 0xd0, 0x84, 0x60, 0x1b, 0x9e,
	0x5b, 0x8d, 0x66, 0x9f, 0x2e, 0xfb, 0x1f, 0x90, 0x03, 0x4a, 0xb6, 0xcc, 0x47, 0xc0, 0x06, 0x17,
	0x31, 0x68, 0x4c, 0x24, 0xa4, 0xf0, 0x82, 0x85, 0xba, 0x4f, 0x86, 0xb0, 0x15, 0xb1, 0xaf, 0x08,
	0x2b, 0xa7, 0xe4, 0x79, 0x59, 0xa6, 0x95, 0xc7, 0x5a, 0x5e, 0x64, 0xd3, 0x42, 0xbe, 0x30, 0x23,
	0x72, 0xcb, 0x81, 0x6d, 0x05, 0x2f, 0xa0, 0x2d, 0xf7, 0xd9, 0xde, 0xa1, 0x55, 0x5f, 0x76, 0x21,
	0x32, 0xeb, 0xd4, 0xb8, 0x0e, 0xee, 0x8a, 0xa8, 0x18, 0x3f, 0xac, 0xe2, 0x6c, 0x53, 0xc4, 0x91,
	0xe7, 0x58, 0xe8, 0x43, 0xa5, 0xc3, 0x34, 0x88, 0xf6, 0x04, 0x7a, 0xea, 0x52, 0xc5, 0x78, 0xd5,
	0x83, 0x12, 0xf8, 0x26, 0x5d, 0x28, 0x9a, 0xe1, 0x63, 0xff, 0x8f, 0x41, 0xb7, 0x96, 0xe5, 0x49,
};

// Decryption: Multiply by 9 for InverseMixColumns
unsigned char mul9[256] =
{
	0x00, 0x09, 0x12, 0x1B, 0x24, 0x2D, 0x36, 0x3F, 0x48, 0x41, 0x5A, 0x53, 0x6C, 0x65, 0x7E, 0x77,
	0x90, 0x99, 0x82, 0x8B, 0xB4, 0xBD, 0xA6, 0xAF, 0xD8, 0xD1, 0xCA, 0xC3, 0xFC, 0xF5, 0xEE, 0xE7,
	0x5B, 0x52, 0x49, 0x40, 0x7F, 0x76, 0x6D, 0x64, 0x13, 0x1A, 0x01, 0x08, 0x37, 0x3E, 0x25, 0x2C,
	0xCB, 0xC2, 0xD9, 0xD0, 0xEF, 0xE6, 0xFD, 0xF4, 0x83, 0x8A, 0x91, 0x98, 0xA7, 0xAE, 0xB5, 0xBC,
	0xB6, 0xBF, 0xA4, 0xAD, 0x92, 0x9B, 0x80, 0x89, 0xFE, 0xF7, 0xEC, 0xE5, 0xDA, 0xD3, 0xC8, 0xC1,
	0x26, 0x2F, 0x34, 0x3D, 0x02, 0x0B, 0x10, 0x19, 0x6E, 0x67, 0x7C, 0x75, 0x4A, 0x43, 0x58, 0x51,
	0xED, 0xE4, 0xFF, 0xF6, 0xC9, 0xC0, 0xDB, 0xD2, 0xA5, 0xAC, 0xB7, 0xBE, 0x81, 0x88, 0x93, 0x9A,
	0x7D, 0x74, 0x6F, 0x66, 0x59, 0x50, 0x4B, 0x42, 0x35, 0x3C, 0x27, 0x2E, 0x11, 0x18, 0x03, 0x0A,
	0x17, 0x1E, 0x05, 0x0C, 0x33, 0x3A, 0x21, 0x28, 0x5F, 0x56, 0x4D, 0x44, 0x7B, 0x72, 0x69, 0x60,
	0x87, 0x8E, 0x95, 0x9C, 0xA3, 0xAA, 0xB1, 0xB8, 0xCF, 0xC6, 0xDD, 0xD4, 0xEB, 0xE2, 0xF9, 0xF0,
	0x4C, 0x45, 0x5E, 0x57, 0x68, 0x61, 0x7A, 0x73, 0x04, 0x0D, 0x16, 0x1F, 0x20, 0x29, 0x32, 0x3B,
	0xDC, 0xD5, 0xCE, 0xC7, 0xF8, 0xF1, 0xEA, 0xE3, 0x94, 0x9D, 0x86, 0x8F, 0xB0, 0xB9, 0xA2, 0xAB,
	0xA1, 0xA8, 0xB3, 0xBA, 0x85, 0x8C, 0x97, 0x9E, 0xE9, 0xE0, 0xFB, 0xF2, 0xCD, 0xC4, 0xDF, 0xD6,
	0x31, 0x38, 0x23, 0x2A, 0x15, 0x1C, 0x07, 0x0E, 0x79, 0x70, 0x6B, 0x62, 0x5D, 0x54, 0x4F, 0x46,
	0xFA, 0xF3, 0xE8, 0xE1, 0xDE, 0xD7, 0xCC, 0xC5, 0xB2, 0xBB, 0xA0, 0xA9, 0x96, 0x9F, 0x84, 0x8D,
	0x6A, 0x63, 0x78, 0x71, 0x4E, 0x47, 0x5C, 0x55, 0x22, 0x2B, 0x30, 0x39, 0x06, 0x0F, 0x14, 0x1D
};

// Decryption: Multiply by 11 for InverseMixColumns
unsigned char mul11[256] =
{
	0x00, 0x0B, 0x16, 0x1D, 0x2C, 0x27, 0x3A, 0x31, 0x58, 0x53, 0x4E, 0x45, 0x74, 0x7F, 0x62, 0x69, 
	0xB0, 0xBB, 0xA6, 0xAD, 0x9C, 0x97, 0x8A, 0x81, 0xE8, 0xE3, 0xFE, 0xF5, 0xC4, 0xCF, 0xD2, 0xD9, 
	0x1B, 0x10, 0x0D, 0x06, 0x37, 0x3C, 0x21, 0x2A, 0x43, 0x48, 0x55, 0x5E, 0x6F, 0x64, 0x79, 0x72, 
	0xAB, 0xA0, 0xBD, 0xB6, 0x87, 0x8C, 0x91, 0x9A, 0xF3, 0xF8, 0xE5, 0xEE, 0xDF, 0xD4, 0xC9, 0xC2, 
	0x36, 0x3D, 0x20, 0x2B, 0x1A, 0x11, 0x0C, 0x07, 0x6E, 0x65, 0x78, 0x73, 0x42, 0x49, 0x54, 0x5F, 
	0x86, 0x8D, 0x90, 0x9B, 0xAA, 0xA1, 0xBC, 0xB7, 0xDE, 0xD5, 0xC8, 0xC3, 0xF2, 0xF9, 0xE4, 0xEF, 
	0x2D, 0x26, 0x3B, 0x30, 0x01, 0x0A, 0x17, 0x1C, 0x75, 0x7E, 0x63, 0x68, 0x59, 0x52, 0x4F, 0x44, 
	0x9D, 0x96, 0x8B, 0x80, 0xB1, 0xBA, 0xA7, 0xAC, 0xC5, 0xCE, 0xD3, 0xD8, 0xE9, 0xE2, 0xFF, 0xF4, 
	0x6C, 0x67, 0x7A, 0x71, 0x40, 0x4B, 0x56, 0x5D, 0x34, 0x3F, 0x22, 0x29, 0x18, 0x13, 0x0E, 0x05, 
	0xDC, 0xD7, 0xCA, 0xC1, 0xF0, 0xFB, 0xE6, 0xED, 0x84, 0x8F, 0x92, 0x99, 0xA8, 0xA3, 0xBE, 0xB5, 
	0x77, 0x7C, 0x61, 0x6A, 0x5B, 0x50, 0x4D, 0x46, 0x2F, 0x24, 0x39, 0x32, 0x03, 0x08, 0x15, 0x1E, 
	0xC7, 0xCC, 0xD1, 0xDA, 0xEB, 0xE0, 0xFD, 0xF6, 0x9F, 0x94, 0x89, 0x82, 0xB3, 0xB8, 0xA5, 0xAE, 
	0x5A, 0x51, 0x4C, 0x47, 0x76, 0x7D, 0x60, 0x6B, 0x02, 0x09, 0x14, 0x1F, 0x2E, 0x25, 0x38, 0x33, 
	0xEA, 0xE1, 0xFC, 0xF7, 0xC6, 0xCD, 0xD0, 0xDB, 0xB2, 0xB9, 0xA4, 0xAF, 0x9E, 0x95, 0x88, 0x83, 
	0x41, 0x4A, 0x57, 0x5C, 0x6D, 0x66, 0x7B, 0x70, 0x19, 0x12, 0x0F, 0x04, 0x35, 0x3E, 0x23, 0x28, 
	0xF1, 0xFA, 0xE7, 0xEC, 0xDD, 0xD6, 0xCB, 0xC0, 0xA9, 0xA2, 0xBF, 0xB4, 0x85, 0x8E, 0x93, 0x98
};

// Decryption: Multiply by 13 for InverseMixColumns
unsigned char mul13[256] =
{
	0x00, 0x03, 0x06, 0x05, 0x0C, 0x0F, 0x0A, 0x09, 0x18, 0x1B, 0x1E, 0x1D, 0x14, 0x17, 0x12, 0x11,
	0x30, 0x33, 0x36, 0x35, 0x3C, 0x3F, 0x3A, 0x39, 0x28, 0x2B, 0x2E, 0x2D, 0x24, 0x27, 0x22, 0x21,
	0x60, 0x63, 0x66, 0x65, 0x6C, 0x6F, 0x6A, 0x69, 0x78, 0x7B, 0x7E, 0x7D, 0x74, 0x77, 0x72, 0x71,
	0x50, 0x53, 0x56, 0x55, 0x5C, 0x5F, 0x5A, 0x59, 0x48, 0x4B, 0x4E, 0x4D, 0x44, 0x47, 0x42, 0x41,
	0xC0, 0xC3, 0xC6, 0xC5, 0xCC, 0xCF, 0xCA, 0xC9, 0xD8, 0xDB, 0xDE, 0xDD, 0xD4, 0xD7, 0xD2, 0xD1,
	0xF0, 0xF3, 0xF6, 0xF5, 0xFC, 0xFF, 0xFA, 0xF9, 0xE8, 0xEB, 0xEE, 0xED, 0xE4, 0xE7, 0xE2, 0xE1,
	0xA0, 0xA3, 0xA6, 0xA5, 0xAC, 0xAF, 0xAA, 0xA9, 0xB8, 0xBB, 0xBE, 0xBD, 0xB4, 0xB7, 0xB2, 0xB1,
	0x90, 0x93, 0x96, 0x95, 0x9C, 0x9F, 0x9A, 0x99, 0x88, 0x8B, 0x8E, 0x8D, 0x84, 0x87, 0x82, 0x81,
	0xFB, 0xF8, 0xFD, 0xFE, 0xF7, 0xF4, 0xF1, 0xF2, 0xE3, 0xE0, 0xE5, 0xE6, 0xEF, 0xEC, 0xE9, 0xEA,
	0xCB, 0xC8, 0xCD, 0xCE, 0xC7, 0xC4, 0xC1, 0xC2, 0xD3, 0xD0, 0xD5, 0xD6, 0xDF, 0xDC, 0xD9, 0xDA,
	0x9B, 0x98, 0x9D, 0x9E, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8F, 0x8C, 0x89, 0x8A,
	0xAB, 0xA8, 0xAD, 0xAE, 0xA7, 0xA4, 0xA1, 0xA2, 0xB3, 0xB0, 0xB5, 0xB6, 0xBF, 0xBC, 0xB9, 0xBA,
	0x3B, 0x38, 0x3D, 0x3E, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2F, 0x2C, 0x29, 0x2A,
	0x0B, 0x08, 0x0D, 0x0E, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1F, 0x1C, 0x19, 0x1A,
	0x5B, 0x58, 0x5D, 0x5E, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4F, 0x4C, 0x49, 0x4A,
	0x6B, 0x68, 0x6D, 0x6E, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7F, 0x7C, 0x79, 0x7A
};

// Decryption: Multiply by 14 for InverseMixColumns
unsigned char mul14[256] =
{
	0x00, 0x0E, 0x1C, 0x12, 0x38, 0x36, 0x24, 0x2A, 0x70, 0x7E, 0x6C, 0x62, 0x48, 0x46, 0x54, 0x5A, 
	0xE0, 0xEE, 0xFC, 0xF2, 0xD8, 0xD6, 0xC4, 0xCA, 0x90, 0x9E, 0x8C, 0x82, 0xA8, 0xA6, 0xB4, 0xBA, 
	0xBB, 0xB5, 0xA7, 0xA9, 0x83, 0x8D, 0x9F, 0x91, 0xCB, 0xC5, 0xD7, 0xD9, 0xF3, 0xFD, 0xEF, 0xE1, 
	0x5B, 0x55, 0x47, 0x49, 0x63, 0x6D, 0x7F, 0x71, 0x2B, 0x25, 0x37, 0x39, 0x13, 0x1D, 0x0F, 0x01, 
	0x0D, 0x03, 0x11, 0x1F, 0x35, 0x3B, 0x29, 0x27, 0x7D, 0x73, 0x61, 0x6F, 0x45, 0x4B, 0x59, 0x57, 
	0xED, 0xE3, 0xF1, 0xFF, 0xD5, 0xDB, 0xC9, 0xC7, 0x9D, 0x93, 0x81, 0x8F, 0xA5, 0xAB, 0xB9, 0xB7, 
	0xB6, 0xB8, 0xAA, 0xA4, 0x8E, 0x80, 0x92, 0x9C, 0xC6, 0xC8, 0xDA, 0xD4, 0xFE, 0xF0, 0xE2, 0xEC, 
	0x56, 0x58, 0x4A, 0x44, 0x6E, 0x60, 0x72, 0x7C, 0x26, 0x28, 0x3A, 0x34, 0x1E, 0x10, 0x02, 0x0C, 
	0x1A, 0x14, 0x06, 0x08, 0x22, 0x2C, 0x3E, 0x30, 0x6A, 0x64, 0x76, 0x78, 0x52, 0x5C, 0x4E, 0x40, 
	0xFA, 0xF4, 0xE6, 0xE8, 0xC2, 0xCC, 0xDE, 0xD0, 0x8A, 0x84, 0x96, 0x98, 0xB2, 0xBC, 0xAE, 0xA0, 
	0xA1, 0xAF, 0xBD, 0xB3, 0x99, 0x97, 0x85, 0x8B, 0xD1, 0xDF, 0xCD, 0xC3, 0xE9, 0xE7, 0xF5, 0xFB, 
	0x41, 0x4F, 0x5D, 0x53, 0x79, 0x77, 0x65, 0x6B, 0x31, 0x3F, 0x2D, 0x23, 0x09, 0x07, 0x15, 0x1B, 
	0x17, 0x19, 0x0B, 0x05, 0x2F, 0x21, 0x33, 0x3D, 0x67, 0x69, 0x7B, 0x75, 0x5F, 0x51, 0x43, 0x4D, 
	0xF7, 0xF9, 0xEB, 0xE5, 0xCF, 0xC1, 0xD3, 0xDD, 0x87, 0x89, 0x9B, 0x95, 0xBF, 0xB1, 0xA3, 0xAD, 
	0xAC, 0xA2, 0xB0, 0xBE, 0x94, 0x9A, 0x88, 0x86, 0xDC, 0xD2, 0xC0, 0xCE, 0xE4, 0xEA, 0xF8, 0xF6, 
	0x4C, 0x42, 0x50, 0x5E, 0x74, 0x7A, 0x68, 0x66, 0x3C, 0x32, 0x20, 0x2E, 0x04, 0x0A, 0x18, 0x16
};

// Auxiliary function for KeyExpansion
/*
Procesa cada bloque de 4 bytes de la clave
Hace una rotacion de 4 bytes
Cada byte en el bloque de 4 bytes es sustituido usando la caja S
y se realiza una xor con las constantes
*/
void KeyExpansionCore(unsigned char * in, unsigned char i) {
	// Rotate left by one byte: shift left 
	unsigned char t = in[0];
	in[0] = in[1];
	in[1] = in[2];
	in[2] = in[3];
	in[3] = t;

	// S-box 4 bytes 
	in[0] = s[in[0]];
	in[1] = s[in[1]];
	in[2] = s[in[2]];
	in[3] = s[in[3]];

	// RCon
	in[0] ^= rcon[i];
}

/* The main KeyExpansion function
 * Se realiza la copia original de la clave en el arreglo,
 * Inicia un bucle para generar las claves hasta alcanzar los 178 bits, cada uno de 16 bytes por ronda
 * 
 */
void KeyExpansion(unsigned char inputKey[16], unsigned char expandedKeys[176]) {
	// The first 128 bits are the original key
	for (int i = 0; i < 16; i++) {
		expandedKeys[i] = inputKey[i];
	}

	int bytesGenerated = 16; // Bytes weve generated so far
	int rconIteration = 1; // Keeps track of rcon value
	unsigned char tmpCore[4]; // Temp storage for core

	while (bytesGenerated < 176) {
		/* Read 4 bytes for the core
		* They are the previously generated 4 bytes
		* Initially, these will be the final 4 bytes of the original key
		*/
		for (int i = 0; i < 4; i++) {
			tmpCore[i] = expandedKeys[i + bytesGenerated - 4];
		}

		// Perform the core once for each 16 byte key
		if (bytesGenerated % 16 == 0) {
			KeyExpansionCore(tmpCore, rconIteration++);
		}

		for (unsigned char a = 0; a < 4; a++) {
			expandedKeys[bytesGenerated] = expandedKeys[bytesGenerated - 16] ^ tmpCore[a];
			bytesGenerated++;
		}

	}
}

#endif /* STRUCTURES_H */
